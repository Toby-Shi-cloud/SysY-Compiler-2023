# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: Auto Test

on:
  push:
    branches:
      - main
      - new-main
  pull_request:
    branches:
      - main
      - new-main

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  GH_TOKEN: ${{ github.token }}

jobs:
  compile:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Cache CMake
        id: cache-cmake
        uses: actions/cache@v3
        with:
          path: ${{github.workspace}}/build
          key: ${{ runner.os }}-cmake-${{ github.sha }}

      - name: Install LLVM and Clang
        if: steps.cache-cmake.outputs.cache-hit != 'true'
        uses: KyleMayes/install-llvm-action@v2
        with:
          version: "10.0"

      - name: Download dependencies
        if: steps.cache-cmake.outputs.cache-hit != 'true'
        run: ./download.py

      - name: CMake Build
        if: steps.cache-cmake.outputs.cache-hit != 'true'
        run: |
          cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} \
                -DCMAKE_C_COMPILER=/usr/bin/clang -DCMAKE_CXX_COMPILER=/usr/bin/clang++
          cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

  push-gitlab:
    needs: compile
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Clone from GitLab
        run: |
          git clone https://pat:${{ secrets.GITLABTOKEN }}@gitlab.eduxiji.net/T202410006203585/compiler2024-toby.git ../compiler2024-toby
          rm -rf ../compiler2024-toby/src
          cp -r src ../compiler2024-toby
      
      - name: Push to GitLab
        run: |
          cd ../compiler2024-toby
          ./path.sh
          ./compile.sh
          git add .
          git commit -m "[actions]: auto update ${{ github.sha }}"
          git push

  functional-test:
    needs: compile
    runs-on: ubuntu-latest
    strategy:
      matrix:
        optimizer: [O0, O2]

    steps:
      - uses: actions/checkout@v3
        with:
          sparse-checkout: |
            tests

      - name: Restore Build Cache
        id: cache-cmake
        uses: actions/cache@v3
        with:
          path: ${{github.workspace}}/build
          key: ${{ runner.os }}-cmake-${{ github.sha }}
  
      - name: If Cache Missed
        if: steps.cache-cmake.outputs.cache-hit != 'true'
        run: exit 1

      - name: Install LLVM and Clang
        uses: KyleMayes/install-llvm-action@v2
        with:
          version: "16.0"

      - name: Download Test Data
        working-directory: ${{github.workspace}}/tests
        run: |
          wget https://github.com/Tobisc-V/sysy-testdata/releases/download/Compiler2022/functional.tar.gz
          tar -xzf functional.tar.gz
          wget https://github.com/Tobisc-V/sysy-testdata/releases/download/Compiler2022/hidden_functional.tar.gz
          tar -xzf hidden_functional.tar.gz

      - name: Test
        working-directory: ${{github.workspace}}/build
        run: |
          chmod +x ${{github.workspace}}/tests/*.sh
          chmod +x ${{github.workspace}}/tests/*.py
          ctest -C ${{env.BUILD_TYPE}} --output-on-failure -R Functional-LLVM-${{matrix.optimizer}}-*

      - name: Summary
        if: always()
        run: |
          echo "## Functional Test Summary (-${{matrix.optimizer}}):" >> $GITHUB_STEP_SUMMARY
          echo "| Test Name | Passed | Failed |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|--------|" >> $GITHUB_STEP_SUMMARY
          cat ${{github.workspace}}/tests/functional.log >> $GITHUB_STEP_SUMMARY || true
          cat ${{github.workspace}}/tests/hidden_functional.log >> $GITHUB_STEP_SUMMARY || true
          echo '' >> $GITHUB_STEP_SUMMARY
          echo '' >> $GITHUB_STEP_SUMMARY
